#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use File::Spec::Unix;
use Log::Dispatch;
use POSIX qw/strftime/;
use YAML;
use MR::OnlineConf::Admin::Storage;
use MR::OnlineConf::Admin::Parameter;
use MR::ChangeBot::Database;

my %options = (
    config   => '/usr/local/etc/onlineconf.yaml',
    status   => '/var/lib/onlineconf-migration.status',
    interval => 5,
);

GetOptions(\%options, qw/
    config|c=s
    loglevel|l=s
    status|s=s
    interval|i=i
/);

my $config = YAML::LoadFile($options{config});

my $MODULE_PATH = '/onlineconf/module';
my $USERNAME = 'onlineconf';

my $log = Log::Dispatch->new(
    outputs => [[ 'Screen', min_level => $options{loglevel} || $config->{loglevel} || 'info', newline => 1 ]],
    callbacks => sub {
        my %in = @_;
        my $prefix = sprintf "%s [%d] %s: ", strftime("%F %T", localtime()), $$, $in{level};
        my $message = $in{message};
        $message =~ s/^/$prefix/gm;
        $message =~ s/\n$//;
        return $message;
    },
);

$log->info("onlineconf-migration started\n");

MR::OnlineConf::Admin::Storage->new(%{$config->{database}}, log => $log);
MR::ChangeBot::Database->new(%{$config->{notification_database}}, log => $log);

my $last_mtime = get_status();
init() unless $last_mtime;

my $exit;
$SIG{INT} = $SIG{TERM} = sub { $exit = 1 };
while (!$exit) {
    eval { update(); 1 } or $log->error($@);
    sleep $options{interval};
}

$log->info("onlineconf-migration finished\n");

sub init {
    MR::OnlineConf::Admin::Storage->transaction(sub {
        foreach my $path ('/onlineconf', $MODULE_PATH) {
            my $node = MR::OnlineConf::Admin::Parameter->new(
                path     => $path,
                username => $USERNAME,
            );
            $node->create() unless $node->exists();
        }
        my $list = MR::OnlineConf::Admin::Storage->select("SELECT * FROM `my_config_module` ORDER BY `ID`");
        foreach my $row (@$list) {
            next if $row->{Name} =~ /^\@/ || $row->{Name} eq 'TREE';
            my $node = MR::OnlineConf::Admin::Parameter->new(
                path     => "$MODULE_PATH/$row->{Name}",
                summary  => defined $row->{Comment} ? $row->{Comment} : '',
                username => $USERNAME,
            );
            unless ($node->exists()) {
                $node->create(comment => 'Migration from onlineconf v1');
                MR::OnlineConf::Admin::Storage->do('
                    INSERT INTO `my_config_tree_group` (`NodeID`, `GroupID`, `RW`)
                    SELECT ?, `GroupID`, true FROM `my_config_module_group` WHERE `ModuleID` = ?
                ', $node->id, $row->{ID});
            }
        }
        my $node = MR::OnlineConf::Admin::Parameter->new(
            path     => "/onlineconf/selftest",
            username => $USERNAME,
        );
        $node->create(comment => 'Migration from onlineconf v1') unless $node->exists();
        $node = MR::OnlineConf::Admin::Parameter->new(
            path     => "$MODULE_PATH/\@SELFTEST",
            mime     => "application/x-symlink",
            data     => "/onlineconf/selftest",
            username => $USERNAME,
        );
        $node->create(comment => 'Migration from onlineconf v1') unless $node->exists();
        $node = MR::OnlineConf::Admin::Parameter->new(
            path     => "$MODULE_PATH/TREE",
            mime     => "application/x-symlink",
            data     => "/",
            username => $USERNAME,
        );
        $node->create(comment => 'Migration from onlineconf v1') unless $node->exists();
    });
    return;
}

sub update {
    MR::OnlineConf::Admin::Storage->transaction(sub {
        my $next_mtime = MR::OnlineConf::Admin::Storage->select('SELECT MAX(`ChangedTime`) AS `MTime` FROM `my_config_transaction`')->[0]->{MTime};
        return if $next_mtime eq $last_mtime;
        my $list = MR::OnlineConf::Admin::Storage->select("
            SELECT m.`Name` AS `Module`, l.`Key`, l.`Version`, l.`Value`, l.`Flags`, l.`Comment` AS `Summary`,
                t.`ChangedBy` AS `Author`,
                t.`ChangedTime` AS `MTime`,
                t.`Comment`
            FROM `my_config_log` l
            JOIN `my_config_module` m ON m.`ID` = l.`Module`
            JOIN `my_config_transaction` t ON t.`Module` = l.`Module` AND t.`Version` = l.`Version`
            WHERE m.`Name` <> '\@OVERLOAD'
            AND t.`ChangedTime` >= ?
            ORDER BY 1, 2, 3
        ", $last_mtime);
        foreach my $row (@$list) {
            my $path = $row->{Key};
            if ($row->{Module} eq 'TREE') {
                next unless $path =~ /^\//;
            } else {
                $path =~ s/\./\//g;
                $path =~ s/^\///;
                $path = $row->{Module} eq '@SELFTEST' ? "/onlineconf/selftest/$path" : "$MODULE_PATH/$row->{Module}/$path";
            }
            my $mime = 'text/plain';
            my $value = $row->{Value};
            if ($row->{Flags} & 1) {
                $mime = 'application/json';
            } elsif ($row->{Flags} & 4) {
                $mime = 'application/x-symlink';
                my ($module, $path) = split /:/, $value, 2;
                $path =~ s/\./\//g;
                $value = "$MODULE_PATH/$module/$path";
            } elsif (!defined $value) {
                $mime = 'application/x-null';
            }
            update_param(
                path     => $path,
                mime     => $mime,
                data     => $value,
                summary  => $row->{Summary},
                author   => $row->{Author} || $USERNAME,
                mtime    => $row->{MTime},
                comment  => defined $row->{Comment} && $row->{Comment} eq 'no message' ? undef : $row->{Comment},
                deleted  => $row->{Flags} & 2,
            );
        }
        $last_mtime = $next_mtime;
        update_status($last_mtime);
    });
    return;
}

sub update_param {
    my (%row) = @_;
    my $current = MR::OnlineConf::Admin::Storage->select('SELECT * FROM `my_config_tree` WHERE `Path` = ? FOR UPDATE', $row{path})->[0];
    if ($current) {
        if ((defined $current->{Value} xor defined $row{data}) || defined $current->{Value} && defined $row{data} && $current->{Value} ne $row{data} || $current->{ContentType} ne $row{mime} || ($current->{Deleted} xor $row{deleted})) {
            MR::OnlineConf::Admin::Storage->do(
                'UPDATE `my_config_tree` SET `Value` = ?, `ContentType` = ?, `Deleted` = ?, `MTime` = ?, `Version` = `Version` + 1 WHERE `Path` = ?',
                $row{data}, $row{mime}, $row{deleted} ? 1 : 0, $row{mtime}, $row{path},
            );
        } else {
            return;
        }
    } else {
        my $parent_path = $row{path};
        $parent_path =~ s/\/([^\/]+)$//;
        $parent_path = '/' if $parent_path eq '';
        my $name = $1;
        my $parent = MR::OnlineConf::Admin::Parameter->new($parent_path, $USERNAME);
        unless ($parent->exists()) {
            update_param(path => $parent_path, mtime => $row{mtime}, mime => 'application/x-null', data => undef);
            $parent = MR::OnlineConf::Admin::Parameter->new($parent_path, $USERNAME);
        }
        MR::OnlineConf::Admin::Storage->do('INSERT INTO `my_config_tree` (`ParentID`, `Name`, `Value`, `Summary`, `ContentType`, `MTime`) VALUES (?, ?, ?, ?, ?, ?)',
            $parent->id, $name, $row{data}, defined $row{summary} ? $row{summary} : '', $row{mime} || 'text/plain', $row{mtime});
    }
    MR::OnlineConf::Admin::Storage->do('
        INSERT INTO `my_config_tree_log` (`NodeID`, `Version`, `ContentType`, `Value`, `Author`, `MTime`, `Comment`, `Deleted`)
        SELECT `ID`, `Version`, `ContentType`, `Value`, ?, `MTime`, ?, `Deleted` FROM `my_config_tree` WHERE `Path` = ?
    ', $row{author}, $row{comment}, $row{path});
    return;
}

sub update_status {
    my ($mtime) = @_;
    open my $f, '>', $options{status} or die "Can't to open file $options{status}: $!\n";
    print $f $mtime;
    close $f;
    return;
}

sub get_status {
    return 0 unless -f $options{status};
    open my $f, '<', $options{status} or die "Can't to open file $options{status}: $!\n";
    my $mtime = <$f>;
    close $f;
    chomp $mtime;
    return $mtime;
}
