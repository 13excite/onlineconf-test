package MR::OnlineConf::Updater::ConfFiles;

use Mouse;
use File::Spec;
use JSON;
use POSIX qw/strftime/;
use Text::Glob qw/match_glob glob_to_regex_string/;
use Sys::Hostname;
use MR::OnlineConf::Updater::Util;

has dir => (
    is  => 'ro',
    isa => 'Str',
    required => 1,
);

has log => (
    is  => 'ro',
    isa => 'Log::Dispatch',
    required => 1,
);

has _data => (
    is  => 'ro',
    isa => 'HashRef',
    default => sub { {} },
);

sub update {
    my ($self, $root) = @_;
    my @failed;
    my $map = $root->get('/onlineconf/module');
    return unless $map;
    my $restriction = $self->_restriction_validator($root);
    foreach my $module (keys %{$map->children}) {
        local $self->{seen_node} = {};
        my $child = $map->child($module);
        $child = $child->real_node();
        next if !$child;
        my $data = $self->_walk_tree($child);
        eval { $self->_dump_module($module, $data, $restriction); 1 }
            or do {
                $self->log->error($@);
                push @failed, $module;
            };
    }
    die sprintf "Failed to write modules: %s\n", join ', ', @failed if @failed;
    return;
}

sub _walk_tree {
    my ($self, $node) = @_;
    my %data;
    local $self->{seen_node}->{$node->id} = 1;
    foreach my $name (keys %{$node->children}) {
        my $child = $node->child($name);
        next if $self->{seen_node}->{$child->id};
        $child = $child->real_node();
        next if !$child || $self->{seen_node}->{$child->id};
        if (!$child->is_null) {
            my $value = $child->value;
            if (ref $value) {
                $data{"$name:JSON"} = eval { JSON::to_json($value) };
            } else {
                $value = '' unless defined $value;
                $value =~ s/\n/\\n/g;
                $value =~ s/\r/\\r/g;
                $data{$name} = $value;
            }
        }
        my $child_data = $self->_walk_tree($child);
        $data{"$name/$_"} = $child_data->{$_} foreach keys %$child_data;
    }
    return \%data;
}

sub _dump_module {
    my ($self, $module, $data, $restriction) = @_;
    my $s = "# This file is autogenerated by $0 at ".strftime("%Y/%d/%m %H:%M:%S" , localtime)."\n";

    $s .= "#! Name $module\n";
    $s .= "#! Version ".time()."\n\n";

    foreach my $k (sort keys %$data){
        my $p = $k;
        my $v = $data->{$k};

        $p = "/$p";

        if ($module eq 'TREE') {
            $k = $p;
        } else {
            $k =~ s/\//./g;
            $p = "/onlineconf/module/$module$p";
        }

        $s .= "$k $v\n" if !$restriction || $restriction->($p);
    }

    $s .= "#EOF";
    return unless $self->_module_modified($module, $s);
    my $filename = File::Spec->catfile($self->dir, "$module.conf");
    open my $f, '>:utf8', "${filename}_tmp" or die "Can't open file ${filename}_tmp: $!\n";
    print $f $s;
    close $f;
    rename "${filename}_tmp", $filename or die "Can't rename ${filename}_tmp to $filename: $!";
    return;
}

sub _module_modified {
    my ($self, $module, $content) = @_;
    my $current;
    my $filename = File::Spec->catfile($self->dir, "$module.conf");
    open my $f, '<:utf8', $filename or return 1;
    while (<$f>) {
        $current .= $_ unless /^#/;
    }
    close $f;
    $content =~ s/^#.*\n?//gm;
    return $content ne $current;
}

sub _restriction_validator {
    my ($self, $root) = @_;
    my @restrictions;
    my $restnode = $root->get('/onlineconf/restriction');
    return unless $restnode;
    foreach my $glob (keys %{$restnode->children}) {
        if (hostname_match_glob($glob)) {
            my $node = $restnode->child($glob);
            $node = $node->real_node();
            if ($node && !$node->is_null) {
                my $value = $node->value;
                unless (ref $value) {
                    my $restr = glob_to_regex_string($value);
                    push @restrictions, qr/^$restr(?:|\/.*)$/;
                }
            }
        }
    }
    return unless @restrictions;
    return sub {
        my ($path) = @_;
        foreach my $regex (@restrictions) {
            return 0 unless defined $regex && $path =~ $regex;
        }
        return 1;
    };
}

no Mouse;
__PACKAGE__->meta->make_immutable();

1;
